from numpy import *
import numpy as np
import os
from scipy.special import gamma
np.set_printoptions(suppress=True) # prints floats, no scientific notation
np.set_printoptions(precision=3) # rounds all array elements to 3rd digit

for REP in range(10):
	# simulate
	R = 50.
	N = 50 #np.random.randint(25,50,1) # no. species
	E = 0.25   #np.random.uniform(0.05,0.25) # fraction of extant


	W_shape = .5
	W_scale = 4.
	br_length = np.random.weibull(W_shape,N)*W_scale

	TS = np.random.uniform(br_length,R,N)
	TS = np.random.uniform(0,R,N)
	#ind_rand_extant = np.random.choice(np.arange(N), size=int(N*E), replace=False,p=br_length/sum(br_length))
        #
	#TS[ind_rand_extant]=np.random.uniform(0,br_length[ind_rand_extant],len(ind_rand_extant))
	TE = TS-br_length
	TE[TE<0]=0

	ts=TS
	te=TE

	# subsample
	q = 0.586
	br = ts-te
	sampling_prob= 1 - exp(-q*br)

	#for i in range(len(br)):
	#	print br[i],sampling_prob[i]

	rr= np.random.uniform(0,1,N)
	index_sampled=[]
	for j in range(len(br)):
		if sampling_prob[j]>=rr[j]: index_sampled.append(j)




	def log_wei_pdf(x,W_shape,W_scale):
		log_wei_pdf = log(W_shape/W_scale) + (W_shape-1)*log(x/W_scale) - (x/W_scale)**W_shape
		return log_wei_pdf

	def update_multiplier_proposal(i,d=1.1):
		S=shape(i)
		u = np.random.uniform(0,1,S)
		l = 2*log(d)
		m = exp(l*(u-.5))
	 	ii = i * m
		return ii, sum(log(m))

	# pdf_Poi_sampling = 1 - exp(-q*v)


	ts=ts[index_sampled]	
	te=te[index_sampled]
	
	ts=np.array([7.10048935872,20.6761709505,17.7882550521,26.1844464988,29.8565183727,18.5535569126,2.1154419272,14.3953380265,19.7771568902,12.3098860461,15.7860389014,8.64265152823,17.8807800105,31.9908818298,28.1406004269,24.6447751047,19.7859141228,8.35177451729,2.77987762272,33.8952668261,22.1429420101,16.2897190121,22.2193975676,18.7721127893,22.273176491,28.3872260893,11.9041572663,14.1358225681,16.2202400722,26.6192069447,22.500948917,28.9870683634,22.9369274948,30.1698739753,28.8311263684,2.42536016834,33.061552971,23.0252820393,1.68462189575,23.1752782056,36.7447388992,33.5347738235,36.6890814576,31.9380618088,13.388813782,26.3945547511,10.0878199617,24.7284481968,31.1683934008,11.1340410547,36.3503379869,13.2677568778,26.5282000175,14.0987426687,7.28214002458,15.0560487973,4.75137997976,8.88097582339,23.2526668344,20.0495917006,34.975418336,26.2595460435,32.2013278971,6.9526845668,7.27822123414,21.6874123051,35.7831802233,12.4439430801,9.50807685855,32.699292887,34.3574574508,31.8176618988,23.6555544328,22.5154986105,34.2081824066,8.10750266048,34.9565227791,11.7400635347,15.4715365326,35.8894356927,20.385572326,35.2224592012,15.4085671411,22.2706015007,20.1768988345,17.778017658,6.81217361459,4.59938679897,11.3906531952,34.1811793854,6.11053882316,23.4424615869,14.2073266252,33.1151796593,13.5988662921,5.26952793129,16.7707067861,3.44295550164,12.8595119342,8.11715964691,30.4383241896,22.9200696779,4.35693314356,36.4297244447,26.4695539571,16.9472253458,24.482347863,5.62844467865,34.8082862808,19.6511109024,35.9265118465,3.6805910084,34.6184244247,12.496819356,12.1892802552,10.2157787075,16.4821541233,15.532750756,3.57570744171,21.8890946079,10.2218962098,30.5520356346,21.0576764774,11.3983254241,23.8684239237,29.1453937467,2.11461150328,8.87969332366,26.9819207448,19.9567406541,10.6720320942])
	te=np.array([3.42093216746,19.8687201954,12.8230582167,24.4259235149,28.0582874975,15.5013780947,0.770049398919,6.56170338536,1.51672568781,11.0320459611,15.7341391564,7.91724407508,16.8787285216,31.2495899489,27.6976150697,19.3740148649,12.3983984787,4.26474784377,2.53506827043,32.6799369726,18.1136877087,14.714001213,19.6241452776,16.1927066051,19.0785402683,24.6936309184,9.03012923361,13.2289835679,14.4671908887,25.4567634466,21.5852010593,12.3123721484,22.4879057765,30.0918204831,22.1140900705,1.193590342,31.6661625394,16.8198793061,1.35613317304,18.0297196785,32.9971603157,31.4615475658,2.00904592767,30.4336861465,10.7440828112,24.0209214764,7.10270985493,24.7264710942,30.6241416354,8.38318532859,34.5451095135,12.7012716214,25.5749075384,6.43149689148,7.15693007826,12.9116269775,4.74322465544,5.69447837863,22.468568624,16.2586898408,11.4740251474,25.8261467076,31.7997611666,1.16761116342,7.25188963164,20.9622674774,35.6699849245,9.76478052312,6.97347160325,31.8426100412,26.8819856817,31.2290961745,21.8614019799,19.5495048326,33.6740315402,3.19492867413,31.2639252562,10.7614872948,9.84699489111,0.124557434613,19.6075689447,34.5655277388,13.3876009836,18.8120715816,6.58296969765,6.12074470965,4.86316165287,4.57199826229,11.2710983424,33.8882056978,5.94748488098,22.5960913832,9.21857319746,29.8994275846,11.4732760109,2.12310069639,14.7633709716,2.44269766232,12.2704382368,5.53923352514,29.5441238259,8.58468230017,3.88137162982,36.4048606988,25.6405035786,16.8809576943,23.5645261047,0.359675849024,15.704065801,17.0030496662,27.3227038383,1.82866093305,32.136619857,2.04506546769,12.1378643133,10.0283982719,10.0769021104,12.7467603785,1.63930262839,12.9480129779,6.6950073335,25.9119429585,18.3633947353,9.26604071747,22.3657240578,28.1804381362,1.62983701627,3.47249565778,18.1865145028,19.7490459756,10.0468539937])
	
	ts_sampled=np.array([5.36578689246,0.0,17.6624708795,0.0,28.5938483056,18.2227026965,0.0,14.1916739639,18.4725511534,0.0,0.0,0.0,0.0,0.0,0.0,23.0960785571,19.4863401149,6.92075787881,0.0,33.4218466493,20.1750570765,16.2746732598,21.8622673604,18.2147432744,19.8725118264,27.4858248773,10.6375968402,13.4547143702,15.1080520519,0.0,0.0,28.5419103296,0.0,0.0,26.4980593231,1.96335881239,32.8016355732,22.1512872097,0.0,22.0501305186,35.6701784193,33.4070009872,36.6389331903,31.1740503944,11.8579333819,26.2332781728,8.78286015938,0.0,0.0,10.4725690495,0.0,0.0,0.0,12.64526749,0.0,14.8179336785,0.0,7.41568408521,22.7332094457,19.8415677199,33.0486322323,0.0,0.0,1.71727093443,0.0,0.0,0.0,11.489182034,0.0,32.0198224446,33.8054261281,31.5541565204,23.2848474481,20.6575917962,0.0,0.0,33.752289219,0.0,15.2462494402,33.3630169077,0.0,0.0,14.6453258258,21.1987308193,17.195160542,15.8100458113,0.0,0.0,0.0,0.0,0.0,23.3212916945,13.7689807272,32.3552393184,12.5662857973,0.0,0.0,0.0,0.0,0.0,29.7534860665,19.4210450036,0.0,0.0,0.0,0.0,0.0,3.87960760472,33.2205307457,17.1551537436,32.3528942338,3.22511440178,32.9878892387,12.3675623205,0.0,0.0,16.3866600642,14.2582812986,3.303591789,17.8194780555,7.18162187967,29.2783521243,20.072513845,9.73737956357,23.0270722699,0.0,0.0,5.05329962025,24.6812668151,0.0,10.0800349024])
	te_sampled=np.array([3.85081759122,0.0,13.2582179541,0.0,28.5938483056,18.2227026965,0.0,8.13224684839,6.76769815575,0.0,0.0,0.0,0.0,0.0,0.0,21.0054627949,12.9370894726,5.54723776238,0.0,33.4218466493,20.1750570765,16.2746732598,20.2813323808,16.9935020205,19.6989272509,25.086753619,9.15855612224,13.4547143702,15.1080520519,0.0,0.0,13.3380696201,0.0,0.0,22.5725878615,1.96335881239,32.1477156523,19.2489164594,0.0,18.646378466,35.6701784193,31.8499811326,3.18943513012,31.1510146625,11.7271765617,25.7827087386,8.78286015938,0.0,0.0,8.40392807221,0.0,0.0,0.0,10.8151245042,0.0,14.8147832567,0.0,6.13164742008,22.7332094457,16.9358341912,13.4930791934,0.0,0.0,1.71727093443,0.0,0.0,0.0,11.489182034,0.0,32.0198224446,27.7333866539,31.5541565204,22.8607618911,19.5795658875,0.0,0.0,31.3273352416,0.0,10.4265424854,0.686495726265,0.0,0.0,14.6453258258,21.1987308193,7.49358430388,8.50730411138,0.0,0.0,0.0,0.0,0.0,23.3212916945,9.71633212084,31.1624511247,11.5130821643,0.0,0.0,0.0,0.0,0.0,29.7438170405,10.033061511,0.0,0.0,0.0,0.0,0.0,2.03497235283,17.2577458824,17.110971412,29.3261988918,3.22511440178,32.9878892387,2.34512665341,0.0,0.0,10.1344133221,14.2582812986,2.00949090752,14.2611651636,6.870728685,26.3965337362,19.2969145849,9.73737956357,22.8055831203,0.0,0.0,5.05329962025,21.826602852,0.0,10.0800349024])
	
	ts=ts[ts_sampled>0]
	te=te[te_sampled>0]
	
	ts_est=np.array([6.91,19.023,30.27,19.736,15.681,19.845,24.573,20.946,8.41,35.089,21.684,17.699,23.344,19.925,21.439,28.96,12.05,14.915,16.828,30.029,27.767,3.576,34.41,23.532,23.594,37.111,34.893,38.052,32.751,13.638,27.937,10.462,12.048,14.28,16.24,8.936,24.592,21.42,34.39,3.282,13.024,33.52,35.261,33.01,24.8,22.087,35.279,16.828,34.639,16.155,23.046,18.614,17.053,24.927,15.32,33.684,14.275,31.298,20.964,5.448,34.571,18.692,33.815,4.645,34.536,13.911,17.569,15.71,4.865,19.382,8.652,30.987,21.719,11.204,24.624,6.615,26.117,11.933])
	te_est=np.array([2.593,11.828,26.904,16.56,6.736,5.381,19.453,11.396,4.1,32.012,18.506,14.622,18.785,15.67,18.301,23.52,7.634,12.001,13.617,12.012,21.285,1.167,30.452,17.786,17.214,34.303,30.423,2.228,29.742,10.058,24.021,7.31,6.995,9.126,13.257,4.887,21.234,15.299,12.18,0.974,10.106,30.547,26.395,29.953,21.524,18.164,30.051,9.018,0.388,12.995,19.686,6.108,6.932,21.689,8.228,29.748,9.994,28.119,8.772,1.204,16.121,15.581,27.941,2.218,31.558,1.488,8.752,12.71,1.193,12.901,5.392,24.884,17.819,8.221,21.189,3.695,20.319,8.581])
	
	#print mean(ts-ts_est)
	#print mean(te-te_est)
	#
	print (ts-te)-(ts_est-te_est), mean((ts-te)-(ts_est-te_est))
	#
	quit()
	print len(te[te==0]), "extant", len(te[te>0]), "extinct",
	
	listW = []
	WA = np.ones(2) # shape, scale
	likA=-inf
	for i in range(1000):
		W,hast=update_multiplier_proposal(WA)
		lik=sum(log_wei_pdf(ts-te,W[0],W[1]))
		if lik-likA + hast >= log(np.random.random()):
			WA=W
			likA=lik
		if i > 100: listW.append(WA)
			
	print np.mean(np.array(listW),axis=0),


	#print len(ts)

	def cdf_Weibull(x,W_shape,W_scale):
		# Weibull cdf
		wei_cdf = 1 - exp(-(x/W_scale)**W_shape)
		return wei_cdf
	

	br =ts-te
	waiting_times = np.array([min(br)] + list(np.diff(sort(br))) )
	#print waiting_times
	#print list(log(1./(1-exp(-q*br))))
	#print log(exp(-q*np.cumsum(waiting_times)))
	
	def int_Poi_prob_Weibull(q,x,n_bins=1000):
		v= np.linspace(0.000001,x,n_bins)
		pdf_Poi_sampling = 1 - exp(-q*v)
		return sum(pdf_Poi_sampling) *(v[1]-v[0])
	
	def pdf_W_poi(W,q,x):
		return exp(log_wei_pdf(x,W[0],W[1]) + log(1-exp(-q*x)))
	
	
	
	listW = []
	WA = np.ones(2) # shape, scale
	likA=-inf
	for it in range(1000):
		W,hast=update_multiplier_proposal(WA)
		
		#x=  min(0.0512933/q, min(ts-te))
		#A1 =1-cdf_Weibull(x,W[0],W[1])
		lik1=sum(log_wei_pdf(br,W[0],W[1])) + sum(log(1-exp(-q*br)))
		v= np.linspace(0.000001,1000,10000)
		P = pdf_W_poi(W,q,v)
		#lik2= log(sum(P) *(v[1]-v[0]))
		lik2= log(sum(P) *(v[1]-v[0]))

		P_extant = [sum(pdf_W_poi(W,q,v[v<=i])) for i in ts[te==0]]
		P_extant = np.array(P_extant)*(v[1]-v[0]) 
		
		lik1_extinct=sum(log_wei_pdf(br[te>0],W[0],W[1])) + sum(log(1-exp(-q*br[te>0])))
		lik1_extant =  sum(log(1-exp(-q*br[te==0])))
		#print lik1, lik1temp+lik1_extant
		
		te_aug=np.random.weibull(W[0],10000)*W[1]
		aug_lik1_extant=[]
		for i in ts[te==0]:
			mean_aug=mean(te_aug[te_aug>i])
			aug_lik1_extant.append(log_wei_pdf(mean_aug,W[0],W[1]))
		
		lik1_extant+=sum(np.array(aug_lik1_extant))
		#te_aug=0
		
		lik = lik1-(lik2)*len(te[te>0]) -sum(log(P_extant)) # +lik1_extant
		
		#print lik, lik1temp-(lik2)*len(te[te>0]) + lik1_extant-sum(log(P_extant))
		
		lik =lik1_extinct-(lik2)*len(te[te>0]) #+ lik1_extant-sum(log(P_extant)-(lik2))
		
		#lik_obs = 1 #sum(log_wei_pdf(br,W[0],W[1])) #+ sum(log(1-exp(-q*br)))     #+log(A1) 
		#
		#sorted_br = sort(br)
		#BR = np.array([0]+list(sorted_br))
		#
		#int1 = np.ones((len(BR),2))
		#for j in range(len(BR)-1):
		#	int1[j,0] = cdf_Weibull(BR[j+1],W[0],W[1]) - cdf_Weibull(BR[j],W[0],W[1]) # slice integral Weibull
		#	int1[j,1] = int_Poi_prob_Weibull(q,BR[j+1]) - int_Poi_prob_Weibull(q,BR[j]) # slice integral Weibull
		#	
		#log_int = log(int1+0.00001)
		#lik_unobs = sum(log_int)
		#lik= lik_unobs+lik_obs
		#lik += sum(log(1./(1-exp(-q*br))))
		
		lik = lik1-(lik2)*len(ts)
		
		if lik-likA + hast >= log(np.random.random()):
			WA=W
			likA=lik
		if it > 10: 
			listW.append(WA)
			#print likA, WA
			
	print np.mean(np.array(listW),axis=0)




N = 12
R = 50
W_shape = .5
W_scale = 4.
br_length = np.random.weibull(W_shape,N)*W_scale

ts = np.random.uniform(br_length,R,N)
te = np.random.uniform(0,R,N)
te = ts-br_length
te[te<0]=0



